import telebot
from telebot import types
import requests
import schedule
import time
import json
import smtplib
import threading
from email.mime.text import MIMEText
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

TOKEN = config['token']
ID_URL = config['id_url']
SITE_URL = config['site_url']
LKK_URL = config['lkk_url']
CHECK_INTERVAL = config['check_interval']
EMAIL_FROM = config['email_from']  # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å  EMAIL
EMAIL_PASSWORD = config['email_password']
SMTP_SERVER = config['smtp_server']
SMTP_PORT = config['smtp_port']
EMAIL_TO = config['email_to']  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å
SUPERVISOR_ID = config['supervisor_id']
DUTY_ID = config['duty_id']

CYCLE = 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    try:
        with open('user_data.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open('user_data.json', 'w') as file:
        json.dump(data, file, indent=4)


# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
LOG_ID = 'id_checks.log'
LOG_SITE = 'site_checks.log'
LOG_LKK = 'lkk_checks.log'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
def check_site_availability(TEST_URL, LOG_FILE):
    try:
        response = requests.get(TEST_URL, timeout=10)
        status = "–î–æ—Å—Ç—É–ø–µ–Ω" if response.status_code == 200 else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except requests.RequestException:
        status = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è?
    try:
        with open(LOG_FILE, 'r') as log:
            # print('open')
            lines = log.readlines()
            if len(lines) > 0:
                last_status = lines[-1].split(" ")[3].strip()
                # print(f'{last_status} !=  {status}= {datetime.now()}')
                if last_status != status:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    with open(LOG_FILE, 'a') as log:
                        now = datetime.now()
                        date_format = now.strftime("%d/%m/%Y %H:%M:%S")
                        log.write(f"{date_format} {TEST_URL} {status}\n")
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    send_push(TEST_URL, status)
    except FileNotFoundError as error:
        with open(LOG_FILE, 'a') as log:
            now = datetime.now()
            date_format = now.strftime("%d/%m/%Y %H:%M:%S")
            log.write(f"{date_format} {TEST_URL} {status}\n")
    # print('return')
    return status


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –Ω–∞ –ø–æ—á—Ç—É
# def send_email(subject, body):
#    msg = MIMEText(body)
#    msg['Subject'] = subject
#    msg['From'] = EMAIL_FROM
#    msg['To'] = EMAIL_TO

#    try:
#        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
#            server.starttls()
#            server.login(EMAIL_FROM, EMAIL_PASSWORD)
#            server.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string())
#    except Exception as e:
#        print(e)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_push(TEST_URL, current_status):
    # current_status = check_site_availability()
    if current_status == '–î–æ—Å—Ç—É–ø–µ–Ω':
        text_notification = (f"‚úÖü§ñ –°–∞–π—Ç {TEST_URL} {current_status}")
    else:
        text_notification = (f"‚ùåü§ñ –°–∞–π—Ç {TEST_URL} {current_status}")
    bot.send_message(chat_id=SUPERVISOR_ID, text=text_notification)
    # bot.send_message(chat_id=DUTY_ID, text=notification)


def check_cycle():
    global CYCLE
    if CYCLE == 1:
        check_site_availability(ID_URL, LOG_ID)
        CYCLE = 2
        # print(1)
    elif CYCLE == 2:
        check_site_availability(SITE_URL, LOG_SITE)
        CYCLE = 3
        # print(2)
    else:
        check_site_availability(LKK_URL, LOG_LKK)
        CYCLE = 1
        # print(3)


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
schedule.every(CHECK_INTERVAL).minutes.do(check_cycle)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–æ–∑–¥–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # resize_keyboard=True –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
    # row_width –∑–∞–¥–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∂–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    btn1 = types.KeyboardButton("üÜî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å \"ID\"")
    btn2 = types.KeyboardButton("üìã –û—Ç—á—ë—Ç \"ID\"")
    btn3 = types.KeyboardButton("üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç")
    btn4 = types.KeyboardButton("üìù –û—Ç—á—ë—Ç –°–ê–ô–¢")
    btn5 = types.KeyboardButton("üëõ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –õ–ö–ö")
    btn6 = types.KeyboardButton("üìë –û—Ç—á—ë—Ç –õ–ö–ö")
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    username = message.from_user.username
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data = load_data()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
    if str(user_id) in user_data:
        bot.reply_to(message,
                     f"–í–∞—à User ID: {user_id}, username: {username}. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π "
                     f"–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[str(user_id)] = {'username': username}
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        save_data(user_data)
        # bot.reply_to(message, f"–í–∞—à User ID: {user_id} –∏ username: {username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    # –ö–Ω–æ–ø–∫–∏ ID
    if message.text == 'üÜî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å \"ID\"':
        status = check_site_availability(ID_URL, LOG_ID)
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
        if status == '–î–æ—Å—Ç—É–ø–µ–Ω':
            bot.send_message(message.chat.id, f"‚úÖ –°–∞–π—Ç {ID_URL} —Å–µ–π—á–∞—Å {status}.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –°–∞–π—Ç {ID_URL} —Å–µ–π—á–∞—Å {status}.")
    elif message.text == 'üìã –û—Ç—á—ë—Ç \"ID\"':
        with open(LOG_ID, 'r') as log:
            lines = log.readlines()[
                    -7 * 24 * 6:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (10 –º–∏–Ω—É—Ç * 6 —Ä–∞–∑ –≤ —á–∞—Å * 24 —á–∞—Å–∞ * 7 –¥–Ω–µ–π)
            report = "".join(lines)
            bot.send_message(message.chat.id, f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n{report}")
    # –ö–Ω–æ–ø–∫–∏ —Å–∞–π—Ç–∞
    elif message.text == 'üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç':
        status = check_site_availability(SITE_URL, LOG_SITE)
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
        if status == '–î–æ—Å—Ç—É–ø–µ–Ω':
            bot.send_message(message.chat.id, f"‚úÖ –°–∞–π—Ç {SITE_URL} —Å–µ–π—á–∞—Å {status}.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –°–∞–π—Ç {SITE_URL} —Å–µ–π—á–∞—Å {status}.")
    elif message.text == 'üìù –û—Ç—á—ë—Ç –°–ê–ô–¢':
        with open(LOG_SITE, 'r') as log:
            lines = log.readlines()[
                    -7 * 24 * 6:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (10 –º–∏–Ω—É—Ç * 6 —Ä–∞–∑ –≤ —á–∞—Å * 24 —á–∞—Å–∞ * 7 –¥–Ω–µ–π)
            report = "".join(lines)
            bot.send_message(message.chat.id, f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n{report}")
    # –ö–Ω–æ–ø–∫–∏ –õ–ö–ö
    elif message.text == 'üëõ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –õ–ö–ö':
        status = check_site_availability(LKK_URL, LOG_LKK)
        if status == '–î–æ—Å—Ç—É–ø–µ–Ω':
            bot.send_message(message.chat.id, f"‚úÖ –°–∞–π—Ç {LKK_URL} —Å–µ–π—á–∞—Å {status}.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –°–∞–π—Ç {LKK_URL} —Å–µ–π—á–∞—Å {status}.")
    elif message.text == 'üìë –û—Ç—á—ë—Ç –õ–ö–ö':
        with open(LOG_LKK, 'r') as log:
            lines = log.readlines()[-7 * 24 * 6:]
            report = "".join(lines)
            # send_email(f"–û—Ç—á—ë—Ç –ø–æ —Å–∞–π—Ç—É {SITE_URL}", report)
            # bot.send_message(message.chat.id, "–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É.")
            bot.send_message(message.chat.id, f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n{report}")


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)


scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# bot.polling()
#bot.infinity_polling(timeout=10, long_polling_timeout = 5)
while True:
    try:
        # bot.polling(none_stop = True)
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as e:
        time.sleep(2)




